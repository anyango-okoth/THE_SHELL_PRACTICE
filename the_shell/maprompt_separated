#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "main.h"

#define MAX_ARGS 10

void handleExitCommand(char *args[]);
void handleSetenvCommand(char *args[]);
void handleUnsetenvCommand(char *args[]);
void handleCdCommand(char *args[]);

void prompt(char *envp[]) {
    char *string = NULL;
    size_t n = 0;
    ssize_t numChars;

    char *args[MAX_ARGS + 1];  /* Increased size by 1 for NULL terminator */

    while (1) {
        printf("simple_shell$ ");

        numChars = getline(&string, &n, stdin);
        if (numChars == -1) {
            free(string);
            exit(EXIT_FAILURE);
        }

        if (string[numChars - 1] == '\n') {
            string[numChars - 1] = '\0';  /* Remove newline character */
        }

        tokenizeString(string, args, MAX_ARGS);
        if (args[0] != NULL) {
            if (strcmp(args[0], "exit") == 0) {
                handleExitCommand(args);
            } else if (strcmp(args[0], "setenv") == 0) {
                handleSetenvCommand(args);
            } else if (strcmp(args[0], "unsetenv") == 0) {
                handleUnsetenvCommand(args);
            } else if (strcmp(args[0], "cd") == 0) {
                handleCdCommand(args);
            }
        }

        executeCommand(args, envp);
    }
}

void handleExitCommand(char *args[]) {
    if (args[1] != NULL) {
        int exitStatus = atoi(args[1]);
        free(args);
        exit(exitStatus);
    } else {
        free(args);
        exit(EXIT_SUCCESS);
    }
}

void handleSetenvCommand(char *args[]) {
    if (args[1] != NULL && args[2] != NULL) {
        if (setenv(args[1], args[2], 1) != 0) {
            fprintf(stderr, "Failed to set environment variable\n");
        }
    } else {
        fprintf(stderr, "Usage: setenv VARIABLE VALUE\n");
    }
}

void handleUnsetenvCommand(char *args[]) {
    if (args[1] != NULL) {
        if (unsetenv(args[1]) != 0) {
            fprintf(stderr, "Failed to unset environment variable\n");
        }
    } else {
        fprintf(stderr, "Usage: unsetenv VARIABLE\n");
    }
}

void handleCdCommand(char *args[]) {
    if (args[1] == NULL || strcmp(args[1], "~") == 0) {
        args[1] = getenv("HOME");
    } else if (strcmp(args[1], "-") == 0) {
        args[1] = getenv("OLDPWD");
    }

    if (chdir(args[1]) == 0) {
        char currentDir[1024];
        getcwd(currentDir, sizeof(currentDir));
        setenv("PWD", currentDir, 1);
        setenv("OLDPWD", getenv("PWD"), 1);
    } else {
        fprintf(stderr, "Failed to change directory\n");
    }
}

